{{- if (eq .chezmoi.os "linux") -}}
#!/usr/bin/env bash

set -eufo pipefail

# Define XDG folders
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"

sudo sh -c "echo 'export ZDOTDIR=\"$XDG_CONFIG_HOME\"/zsh' >> /etc/zshenv"


# Initialize package list
packages=(
    ripgrep
    bat
    curl
    jq
    neovim
    fzf
    unzip
    zsh
    gnupg
    exa
    git
    mc
)

{{- if (eq .chezmoi.osRelease.id "opensuse-tumbleweed") }}
    echo "Welcome to OpenSuse again, did you enable the community repositories via: Yast > Repositories?"
    read -p "Press enter to continue"
{{- end }}

# Adjust package names for specific distributions
{{- if (eq .chezmoi.osRelease.id "fedora") }}
    # Fedora-specific adjustments
    packages+=(
        fd-find
        freerdp
        ShellCheck
        nextcloud-client
        thunderbird
        vlc
    )
{{- else if (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
    # Debian-based adjustments
    packages+=(
        fd-find
        shellcheck
    )
{{- else if (eq .chezmoi.osRelease.id "opensuse-tumbleweed") }}
    # OpenSUSE Tumbleweed-specific adjustments
    packages+=(
        fd
        ShellCheck
        fira-code-fonts
        freerdp
        nextcloud-desktop
        MozillaThunderbird
        opi
    )
{{- else if (eq .chezmoi.osRelease.id "arch") }}
    # Arch Linux-specific adjustments
    packages+=(
        fd
        shellcheck
    )
{{- end }}

# Install packages using the appropriate package manager
{{- if (eq .chezmoi.osRelease.id "fedora") }}
    # Fedora
    sudo bash -c "echo max_parallel_downloads=10 >> /etc/dnf/dnf.conf"
    sudo bash -c "echo fastestmirror=true >> /etc/dnf/dnf.conf"
    sudo dnf install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    sudo dnf group update core -y
    sudo dnf update -y
    sudo dnf install -y "${packages[@]}"
    sudo dnf swap -y 'ffmpeg-free' 'ffmpeg' --allowerasing # Switch to full FFMPEG.
    sudo dnf group -y install Multimedia
    # sudo dnf update -y @multimedia --setopt="install_weak_deps=False" --exclude=PackageKit-gstreamer-plugin # Installs gstreamer components. Required if you use Gnome Videos and other dependent applications.
    # sudo dnf update -y @sound-and-video # Installs useful Sound and Video complement packages.    
    sudo dnf install -y gstreamer1-plugins-good-extras gstreamer1-plugins-ugly gstreamer1-plugin-openh264 libavcodec-freeworld libheif-freeworld
    sudo dnf swap -y libavcodec-free libavcodec-freeworld 
    sudo dnf group -y install --with-optional virtualization
    sudo systemctl start libvirtd
    sudo systemctl enable libvirtd
    # sudo dnf install -y akmod-nvidia
    # sudo dnf swap mesa-va-drivers mesa-va-drivers-freeworld
    # sudo dnf swap mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
    sudo dnf install -y unzip p7zip p7zip-plugins unrar
    #sudo fwupdmgr refresh --force
    #sudo fwupdmgr get-devices # Lists devices with available updates.
    #sudo fwupdmgr get-updates # Fetches list of available updates.
    #sudo fwupdmgr update
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

    # sudo hostnamectl set-hostname $sethostname 
{{- else if (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
    # Debian-based
    sudo apt-get update
    sudo apt-get install -y "${packages[@]}"
{{- else if (eq .chezmoi.osRelease.id "opensuse-tumbleweed") }}
    # OpenSUSE Tumbleweed
    sudo zypper install -y "${packages[@]}"
    sudo opi codecs -n
    sudo opi dotnet -n
    sudo opi msedge -n
    sudo opi vscode -n
    sudo opi nerd-fonts-firacode -n
{{- else if (eq .chezmoi.osRelease.id "arch") }}
    # Arch Linux
    sudo pacman -Syu --noconfirm "${packages[@]}"
{{- else }}
    echo "Unsupported package manager. Install the packages manually."
    exit 1
{{- end }}


mkdir -p "$HOME/.local/bin"
sh -c "$(curl -fsSL https://starship.rs/install.sh | head -n -5)" -- -y -b "$HOME/.local/bin"

{{- if not (eq .chezmoi.os "darwin") }}
echo "Setting user shell if needed..."
zshloc="$(which zsh)"
if [ "$SHELL" != "$zshloc" ]; then
    chsh -s "$zshloc"
    echo Done
fi
{{- end }}

# Upgrade packages if automation.update is true
{{ if eq .automation.update true }}
if command -v zypper &>/dev/null; then
    sudo zypper refresh
    sudo zypper up -y
    sudo zypper dup -y
elif command -v dnf &>/dev/null; then
    sudo dnf upgrade -y
elif command -v apt-get &>/dev/null; then
    sudo apt-get update
    sudo apt-get upgrade -y
elif command -v pacman &>/dev/null; then
    sudo pacman -Syu --noconfirm
else
    echo "Unsupported package manager. Update the packages manually."
fi
{{- end }}

echo "XDG folders and packages are set up successfully."

{{- end -}}
